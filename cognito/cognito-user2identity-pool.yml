AWSTemplateFormatVersion: 2010-09-09
Description: This template configures a user pool domain and hosted login. Allocate IdentityPool that grant AWS resources (LexBot) from Userpool login

Parameters:
  IdentityPoolName:
    Type: String
    Description: Identity Pool Name
  CustomIamRoleArn:
    Type: String
    Description: ARN of lambda that creates a Role. Avoid problem of User that grant access through admin
  LexBotName:
    Type: String
    Description: Lex Bot Name
  pUserPoolName:
    Type: String
    Description: user pool name
  pClientName:
    Type: String
    Description: clien pool name
  pCallbackUrl:
    Type: String
    Description: client callback urls
  pCognitoDomainName:
    Type: String
    Description: cognito domain name

Resources:
  # Create Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    DependsOn:
    - CognitoAppClient
    - CognitoUserPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoAppClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
  
  CognitoIdentityPoolSetRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    DependsOn:
    - IdentityPoolRole
    - CognitoUserPool
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt   IdentityPoolRole.Arn
        # Avoid unauthenticated users
        #unauthenticated: !GetAtt IdentityPoolRole.Arn
  
  IdentityPoolRole:
    Type: 'Custom::CreateIamRole'
    Properties:
      ServiceToken: !Ref CustomIamRoleArn
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
       
      Policies:
        - PolicyName: LexPost
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lex:PostText
                  - lex:PostContent
                  - lex:DeleteSession
                  - lex:GetSession
                  - lex:PutSession
                Resource:
                  - !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot:${LexBotName}:*"          

  CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        AutoVerifiedAttributes:
          - email
        DeviceConfiguration:
          ChallengeRequiredOnNewDevice: false
          DeviceOnlyRememberedOnUserPrompt: false
        EmailVerificationMessage: "Your username is {####} and temporary password is {####}"
        EmailVerificationSubject: "Your temporary password"
        MfaConfiguration: "OFF"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
        UsernameAttributes:
          - email
        UserPoolName: !Ref pUserPoolName
  
  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
    - CognitoUserPool
    Properties:
      ClientName: !Ref pClientName
      GenerateSecret: true
      RefreshTokenValidity: 7
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Ref pCallbackUrl
        - !Join ["", [!Ref pCallbackUrl, "/"]]
        - !Join ["/", [!Ref pCallbackUrl, "parseauth"]]
        - !Join ["/", [!Ref pCallbackUrl, "oauth2/idpresponse"]]
        # DEV/TEST Purposes
        - "http://localhost:3000/"
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    DependsOn:
    - CognitoUserPool
    Properties:
      Domain: !Ref pCognitoDomainName
      UserPoolId: !Ref CognitoUserPool


Outputs:
    CognitoIdentityPoolId:
      Description: Cognito identity pool id.
      Value: !Ref CognitoIdentityPool
    CognitoUserPool:
      Description: "User Pool ID"
      Value: !Ref CognitoUserPool
    UserPoolArn:
      Description: "User Pool Arn"
      Value: !GetAtt CognitoUserPool.Arn        
    UserPoolClientId:
      Description: "App Client Id"
      Value: !Ref CognitoAppClient
    LoginUrlDevTest:
      Description: "Login URL with SAML and UserPool (Ireland Region)"
      Value: !Sub "https://${pCognitoDomainName}.auth.eu-west-1.amazoncognito.com/login?response_type=token&client_id=${CognitoAppClient}&redirect_uri={redirect}"    